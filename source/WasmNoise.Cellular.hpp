#pragma once
#include "WasmNoise.hpp"
#include "WasmNoise.Common.hpp"
#ifdef WN_INCLUDE_CELLULAR_FRACTAL
#include "WasmNoise.Fractal.hpp"
#endif

const WN_DECIMAL CELL_2D_X[] =
{
  WN_DECIMAL(-0.6440658039), WN_DECIMAL(-0.08028078721), WN_DECIMAL(0.9983546168), WN_DECIMAL(0.9869492062), WN_DECIMAL(0.9284746418), WN_DECIMAL(0.6051097552), WN_DECIMAL(-0.794167404), WN_DECIMAL(-0.3488667991), WN_DECIMAL(-0.943136526), WN_DECIMAL(-0.9968171318), WN_DECIMAL(0.8740961579), WN_DECIMAL(0.1421139764), WN_DECIMAL(0.4282553608), WN_DECIMAL(-0.9986665833), WN_DECIMAL(0.9996760121), WN_DECIMAL(-0.06248383632),
	WN_DECIMAL(0.7120139305), WN_DECIMAL(0.8917660409), WN_DECIMAL(0.1094842955), WN_DECIMAL(-0.8730880804), WN_DECIMAL(0.2594811489), WN_DECIMAL(-0.6690063346), WN_DECIMAL(-0.9996834972), WN_DECIMAL(-0.8803608671), WN_DECIMAL(-0.8166554937), WN_DECIMAL(0.8955599676), WN_DECIMAL(-0.9398321388), WN_DECIMAL(0.07615451399), WN_DECIMAL(-0.7147270565), WN_DECIMAL(0.8707354457), WN_DECIMAL(-0.9580008579), WN_DECIMAL(0.4905965632),
	WN_DECIMAL(0.786775944), WN_DECIMAL(0.1079711577), WN_DECIMAL(0.2686638979), WN_DECIMAL(0.6113487322), WN_DECIMAL(-0.530770584), WN_DECIMAL(-0.7837268286), WN_DECIMAL(-0.8558691039), WN_DECIMAL(-0.5726093896), WN_DECIMAL(-0.9830740914), WN_DECIMAL(0.7087766359), WN_DECIMAL(0.6807027153), WN_DECIMAL(-0.08864708788), WN_DECIMAL(0.6704485923), WN_DECIMAL(-0.1350735482), WN_DECIMAL(-0.9381333003), WN_DECIMAL(0.9756655376),
	WN_DECIMAL(0.4231433671), WN_DECIMAL(-0.4959787385), WN_DECIMAL(0.1005554325), WN_DECIMAL(-0.7645857281), WN_DECIMAL(-0.5859053796), WN_DECIMAL(-0.9751154306), WN_DECIMAL(-0.6972258572), WN_DECIMAL(0.7907012002), WN_DECIMAL(-0.9109899213), WN_DECIMAL(-0.9584307894), WN_DECIMAL(-0.8269529333), WN_DECIMAL(0.2608264719), WN_DECIMAL(-0.7773760119), WN_DECIMAL(0.7606456974), WN_DECIMAL(-0.8961083758), WN_DECIMAL(-0.9838134719),
	WN_DECIMAL(0.7338893576), WN_DECIMAL(0.2161226729), WN_DECIMAL(0.673509891), WN_DECIMAL(-0.5512056873), WN_DECIMAL(0.6899744332), WN_DECIMAL(0.868004831), WN_DECIMAL(0.5897430311), WN_DECIMAL(-0.8950444221), WN_DECIMAL(-0.3595752773), WN_DECIMAL(0.8209486981), WN_DECIMAL(-0.2912360132), WN_DECIMAL(-0.9965011374), WN_DECIMAL(0.9766994634), WN_DECIMAL(0.738790822), WN_DECIMAL(-0.4730947722), WN_DECIMAL(0.8946479441),
	WN_DECIMAL(-0.6943628971), WN_DECIMAL(-0.6620468182), WN_DECIMAL(-0.0887255502), WN_DECIMAL(-0.7512250855), WN_DECIMAL(-0.5322986898), WN_DECIMAL(0.5226295385), WN_DECIMAL(0.2296318375), WN_DECIMAL(0.7915307344), WN_DECIMAL(-0.2756485999), WN_DECIMAL(-0.6900234522), WN_DECIMAL(0.07090588086), WN_DECIMAL(0.5981278485), WN_DECIMAL(0.3033429312), WN_DECIMAL(-0.7253142797), WN_DECIMAL(-0.9855874307), WN_DECIMAL(-0.1761843396),
	WN_DECIMAL(-0.6438468325), WN_DECIMAL(-0.9956136595), WN_DECIMAL(0.8541580762), WN_DECIMAL(-0.9999807666), WN_DECIMAL(-0.02152416253), WN_DECIMAL(-0.8705983095), WN_DECIMAL(-0.1197138014), WN_DECIMAL(-0.992107781), WN_DECIMAL(-0.9091181546), WN_DECIMAL(0.788610536), WN_DECIMAL(-0.994636402), WN_DECIMAL(0.4211256853), WN_DECIMAL(0.3110430857), WN_DECIMAL(-0.4031127839), WN_DECIMAL(0.7610684239), WN_DECIMAL(0.7685674467),
	WN_DECIMAL(0.152271555), WN_DECIMAL(-0.9364648723), WN_DECIMAL(0.1681333739), WN_DECIMAL(-0.3567427907), WN_DECIMAL(-0.418445483), WN_DECIMAL(-0.98774778), WN_DECIMAL(0.8705250765), WN_DECIMAL(-0.8911701067), WN_DECIMAL(-0.7315350966), WN_DECIMAL(0.6030885658), WN_DECIMAL(-0.4149130821), WN_DECIMAL(0.7585339481), WN_DECIMAL(0.6963196535), WN_DECIMAL(0.8332685012), WN_DECIMAL(-0.8086815232), WN_DECIMAL(0.7518116724),
	WN_DECIMAL(-0.3490535894), WN_DECIMAL(0.6972110903), WN_DECIMAL(-0.8795676928), WN_DECIMAL(-0.6442331882), WN_DECIMAL(0.6610236811), WN_DECIMAL(-0.9853565782), WN_DECIMAL(-0.590338458), WN_DECIMAL(0.09843602117), WN_DECIMAL(0.5646534882), WN_DECIMAL(-0.6023259233), WN_DECIMAL(-0.3539248861), WN_DECIMAL(0.5132728656), WN_DECIMAL(0.9380385118), WN_DECIMAL(-0.7599270056), WN_DECIMAL(-0.7425936564), WN_DECIMAL(-0.6679610562),
	WN_DECIMAL(-0.3018497816), WN_DECIMAL(0.814478266), WN_DECIMAL(0.03777430269), WN_DECIMAL(-0.7514235086), WN_DECIMAL(0.9662556939), WN_DECIMAL(-0.4720194901), WN_DECIMAL(-0.435054126), WN_DECIMAL(0.7091901235), WN_DECIMAL(0.929379209), WN_DECIMAL(0.9997434357), WN_DECIMAL(0.8306320299), WN_DECIMAL(-0.9434019629), WN_DECIMAL(-0.133133759), WN_DECIMAL(0.5048413216), WN_DECIMAL(0.3711995273), WN_DECIMAL(0.98552091),
	WN_DECIMAL(0.7401857005), WN_DECIMAL(-0.9999981398), WN_DECIMAL(-0.2144033253), WN_DECIMAL(0.4808624681), WN_DECIMAL(-0.413835885), WN_DECIMAL(0.644229305), WN_DECIMAL(0.9626648696), WN_DECIMAL(0.1833665934), WN_DECIMAL(0.5794129), WN_DECIMAL(0.01404446873), WN_DECIMAL(0.4388494993), WN_DECIMAL(0.5213612322), WN_DECIMAL(-0.5281609948), WN_DECIMAL(-0.9745306846), WN_DECIMAL(-0.9904373013), WN_DECIMAL(0.9100232252),
	WN_DECIMAL(-0.9914057719), WN_DECIMAL(0.7892627765), WN_DECIMAL(0.3364421659), WN_DECIMAL(-0.9416099764), WN_DECIMAL(0.7802732656), WN_DECIMAL(0.886302871), WN_DECIMAL(0.6524471291), WN_DECIMAL(0.5762186726), WN_DECIMAL(-0.08987644664), WN_DECIMAL(-0.2177026782), WN_DECIMAL(-0.9720345052), WN_DECIMAL(-0.05722538858), WN_DECIMAL(0.8105983127), WN_DECIMAL(0.3410261032), WN_DECIMAL(0.6452309645), WN_DECIMAL(-0.7810612152),
	WN_DECIMAL(0.9989395718), WN_DECIMAL(-0.808247815), WN_DECIMAL(0.6370177929), WN_DECIMAL(0.5844658772), WN_DECIMAL(0.2054070861), WN_DECIMAL(0.055960522), WN_DECIMAL(-0.995827561), WN_DECIMAL(0.893409165), WN_DECIMAL(-0.931516824), WN_DECIMAL(0.328969469), WN_DECIMAL(-0.3193837488), WN_DECIMAL(0.7314755657), WN_DECIMAL(-0.7913517714), WN_DECIMAL(-0.2204109786), WN_DECIMAL(0.9955900414), WN_DECIMAL(-0.7112353139),
	WN_DECIMAL(-0.7935008741), WN_DECIMAL(-0.9961918204), WN_DECIMAL(-0.9714163995), WN_DECIMAL(-0.9566188669), WN_DECIMAL(0.2748495632), WN_DECIMAL(-0.4681743221), WN_DECIMAL(-0.9614449642), WN_DECIMAL(0.585194072), WN_DECIMAL(0.4532946061), WN_DECIMAL(-0.9916113176), WN_DECIMAL(0.942479587), WN_DECIMAL(-0.9813704753), WN_DECIMAL(-0.6538429571), WN_DECIMAL(0.2923335053), WN_DECIMAL(-0.2246660704), WN_DECIMAL(-0.1800781949),
	WN_DECIMAL(-0.9581216256), WN_DECIMAL(0.552215082), WN_DECIMAL(-0.9296791922), WN_DECIMAL(0.643183699), WN_DECIMAL(0.9997325981), WN_DECIMAL(-0.4606920354), WN_DECIMAL(-0.2148721265), WN_DECIMAL(0.3482070809), WN_DECIMAL(0.3075517813), WN_DECIMAL(0.6274756393), WN_DECIMAL(0.8910881765), WN_DECIMAL(-0.6397771309), WN_DECIMAL(-0.4479080125), WN_DECIMAL(-0.5247665011), WN_DECIMAL(-0.8386507094), WN_DECIMAL(0.3901291416),
	WN_DECIMAL(0.1458336921), WN_DECIMAL(0.01624613149), WN_DECIMAL(-0.8273199879), WN_DECIMAL(0.5611100679), WN_DECIMAL(-0.8380219841), WN_DECIMAL(-0.9856122234), WN_DECIMAL(-0.861398618), WN_DECIMAL(0.6398413916), WN_DECIMAL(0.2694510795), WN_DECIMAL(0.4327334514), WN_DECIMAL(-0.9960265354), WN_DECIMAL(-0.939570655), WN_DECIMAL(-0.8846996446), WN_DECIMAL(0.7642113189), WN_DECIMAL(-0.7002080528), WN_DECIMAL(0.664508256),
};

const WN_DECIMAL CELL_2D_Y[] =
{
	WN_DECIMAL(0.7649700911), WN_DECIMAL(0.9967722885), WN_DECIMAL(0.05734160033), WN_DECIMAL(-0.1610318741), WN_DECIMAL(0.371395799), WN_DECIMAL(-0.7961420628), WN_DECIMAL(0.6076990492), WN_DECIMAL(-0.9371723195), WN_DECIMAL(0.3324056156), WN_DECIMAL(0.07972205329), WN_DECIMAL(-0.4857529277), WN_DECIMAL(-0.9898503007), WN_DECIMAL(0.9036577593), WN_DECIMAL(0.05162417479), WN_DECIMAL(-0.02545330525), WN_DECIMAL(-0.998045976),
	WN_DECIMAL(-0.7021653386), WN_DECIMAL(-0.4524967717), WN_DECIMAL(-0.9939885256), WN_DECIMAL(-0.4875625128), WN_DECIMAL(-0.9657481729), WN_DECIMAL(-0.7432567015), WN_DECIMAL(0.02515761212), WN_DECIMAL(0.4743044842), WN_DECIMAL(0.5771254669), WN_DECIMAL(0.4449408324), WN_DECIMAL(0.3416365773), WN_DECIMAL(0.9970960285), WN_DECIMAL(0.6994034849), WN_DECIMAL(0.4917517499), WN_DECIMAL(0.286765333), WN_DECIMAL(0.8713868327),
	WN_DECIMAL(0.6172387009), WN_DECIMAL(0.9941540269), WN_DECIMAL(0.9632339851), WN_DECIMAL(-0.7913613129), WN_DECIMAL(0.847515538), WN_DECIMAL(0.6211056739), WN_DECIMAL(0.5171924952), WN_DECIMAL(-0.8198283277), WN_DECIMAL(-0.1832084353), WN_DECIMAL(0.7054329737), WN_DECIMAL(0.7325597678), WN_DECIMAL(0.9960630973), WN_DECIMAL(0.7419559859), WN_DECIMAL(0.9908355749), WN_DECIMAL(-0.346274329), WN_DECIMAL(0.2192641299),
	WN_DECIMAL(-0.9060627411), WN_DECIMAL(-0.8683346653), WN_DECIMAL(0.9949314574), WN_DECIMAL(-0.6445220433), WN_DECIMAL(-0.8103794704), WN_DECIMAL(-0.2216977607), WN_DECIMAL(0.7168515217), WN_DECIMAL(0.612202264), WN_DECIMAL(-0.412428616), WN_DECIMAL(0.285325116), WN_DECIMAL(0.56227115), WN_DECIMAL(-0.9653857009), WN_DECIMAL(-0.6290361962), WN_DECIMAL(0.6491672535), WN_DECIMAL(0.443835306), WN_DECIMAL(-0.1791955706),
	WN_DECIMAL(-0.6792690269), WN_DECIMAL(-0.9763662173), WN_DECIMAL(0.7391782104), WN_DECIMAL(0.8343693968), WN_DECIMAL(0.7238337389), WN_DECIMAL(0.4965557504), WN_DECIMAL(0.8075909592), WN_DECIMAL(-0.4459769977), WN_DECIMAL(-0.9331160806), WN_DECIMAL(-0.5710019572), WN_DECIMAL(0.9566512346), WN_DECIMAL(-0.08357920318), WN_DECIMAL(0.2146116448), WN_DECIMAL(-0.6739348049), WN_DECIMAL(0.8810115417), WN_DECIMAL(0.4467718167),
	WN_DECIMAL(-0.7196250184), WN_DECIMAL(-0.749462481), WN_DECIMAL(0.9960561112), WN_DECIMAL(0.6600461127), WN_DECIMAL(-0.8465566164), WN_DECIMAL(-0.8525598897), WN_DECIMAL(-0.9732775654), WN_DECIMAL(0.6111293616), WN_DECIMAL(-0.9612584717), WN_DECIMAL(-0.7237870097), WN_DECIMAL(-0.9974830104), WN_DECIMAL(-0.8014006968), WN_DECIMAL(0.9528814544), WN_DECIMAL(-0.6884178931), WN_DECIMAL(-0.1691668301), WN_DECIMAL(0.9843571905),
	WN_DECIMAL(0.7651544003), WN_DECIMAL(-0.09355982605), WN_DECIMAL(-0.5200134429), WN_DECIMAL(-0.006202125807), WN_DECIMAL(-0.9997683284), WN_DECIMAL(0.4919944954), WN_DECIMAL(-0.9928084436), WN_DECIMAL(-0.1253880012), WN_DECIMAL(-0.4165383308), WN_DECIMAL(-0.6148930171), WN_DECIMAL(-0.1034332049), WN_DECIMAL(-0.9070022917), WN_DECIMAL(-0.9503958117), WN_DECIMAL(0.9151503065), WN_DECIMAL(-0.6486716073), WN_DECIMAL(0.6397687707),
	WN_DECIMAL(-0.9883386937), WN_DECIMAL(0.3507613761), WN_DECIMAL(0.9857642561), WN_DECIMAL(-0.9342026446), WN_DECIMAL(-0.9082419159), WN_DECIMAL(0.1560587169), WN_DECIMAL(0.4921240607), WN_DECIMAL(-0.453669308), WN_DECIMAL(0.6818037859), WN_DECIMAL(0.7976742329), WN_DECIMAL(0.9098610522), WN_DECIMAL(0.651633524), WN_DECIMAL(0.7177318024), WN_DECIMAL(-0.5528685241), WN_DECIMAL(0.5882467118), WN_DECIMAL(0.6593778956),
	WN_DECIMAL(0.9371027648), WN_DECIMAL(-0.7168658839), WN_DECIMAL(-0.4757737632), WN_DECIMAL(0.7648291307), WN_DECIMAL(0.7503650398), WN_DECIMAL(0.1705063456), WN_DECIMAL(-0.8071558121), WN_DECIMAL(-0.9951433815), WN_DECIMAL(-0.8253280792), WN_DECIMAL(-0.7982502628), WN_DECIMAL(0.9352738503), WN_DECIMAL(0.8582254747), WN_DECIMAL(-0.3465310238), WN_DECIMAL(0.65000842), WN_DECIMAL(-0.6697422351), WN_DECIMAL(0.7441962291),
	WN_DECIMAL(-0.9533555), WN_DECIMAL(0.5801940659), WN_DECIMAL(-0.9992862963), WN_DECIMAL(-0.659820211), WN_DECIMAL(0.2575848092), WN_DECIMAL(0.881588113), WN_DECIMAL(-0.9004043022), WN_DECIMAL(-0.7050172826), WN_DECIMAL(0.369126382), WN_DECIMAL(-0.02265088836), WN_DECIMAL(0.5568217228), WN_DECIMAL(-0.3316515286), WN_DECIMAL(0.991098079), WN_DECIMAL(-0.863212164), WN_DECIMAL(-0.9285531277), WN_DECIMAL(0.1695539323),
	WN_DECIMAL(-0.672402505), WN_DECIMAL(-0.001928841934), WN_DECIMAL(0.9767452145), WN_DECIMAL(-0.8767960349), WN_DECIMAL(0.9103515037), WN_DECIMAL(-0.7648324016), WN_DECIMAL(0.2706960452), WN_DECIMAL(-0.9830446035), WN_DECIMAL(0.8150341657), WN_DECIMAL(-0.9999013716), WN_DECIMAL(-0.8985605806), WN_DECIMAL(0.8533360801), WN_DECIMAL(0.8491442537), WN_DECIMAL(-0.2242541966), WN_DECIMAL(-0.1379635899), WN_DECIMAL(-0.4145572694),
	WN_DECIMAL(0.1308227633), WN_DECIMAL(0.6140555916), WN_DECIMAL(0.9417041303), WN_DECIMAL(-0.336705587), WN_DECIMAL(-0.6254387508), WN_DECIMAL(0.4631060578), WN_DECIMAL(-0.7578342456), WN_DECIMAL(-0.8172955655), WN_DECIMAL(-0.9959529228), WN_DECIMAL(-0.9760151351), WN_DECIMAL(0.2348380732), WN_DECIMAL(-0.9983612848), WN_DECIMAL(0.5856025746), WN_DECIMAL(-0.9400538266), WN_DECIMAL(-0.7639875669), WN_DECIMAL(0.6244544645),
	WN_DECIMAL(0.04604054566), WN_DECIMAL(0.5888424828), WN_DECIMAL(0.7708490978), WN_DECIMAL(-0.8114182882), WN_DECIMAL(0.9786766212), WN_DECIMAL(-0.9984329822), WN_DECIMAL(0.09125496582), WN_DECIMAL(-0.4492438803), WN_DECIMAL(-0.3636982357), WN_DECIMAL(0.9443405575), WN_DECIMAL(-0.9476254645), WN_DECIMAL(-0.6818676535), WN_DECIMAL(-0.6113610831), WN_DECIMAL(0.9754070948), WN_DECIMAL(-0.0938108173), WN_DECIMAL(-0.7029540015),
	WN_DECIMAL(-0.6085691109), WN_DECIMAL(-0.08718862881), WN_DECIMAL(-0.237381926), WN_DECIMAL(0.2913423132), WN_DECIMAL(0.9614872426), WN_DECIMAL(0.8836361266), WN_DECIMAL(-0.2749974196), WN_DECIMAL(-0.8108932717), WN_DECIMAL(-0.8913607575), WN_DECIMAL(0.129255541), WN_DECIMAL(-0.3342637104), WN_DECIMAL(-0.1921249337), WN_DECIMAL(-0.7566302845), WN_DECIMAL(-0.9563164339), WN_DECIMAL(-0.9744358146), WN_DECIMAL(0.9836522982),
	WN_DECIMAL(-0.2863615732), WN_DECIMAL(0.8337016872), WN_DECIMAL(0.3683701937), WN_DECIMAL(0.7657119102), WN_DECIMAL(-0.02312427772), WN_DECIMAL(0.8875600535), WN_DECIMAL(0.976642191), WN_DECIMAL(0.9374176384), WN_DECIMAL(0.9515313457), WN_DECIMAL(-0.7786361937), WN_DECIMAL(-0.4538302125), WN_DECIMAL(-0.7685604874), WN_DECIMAL(-0.8940796454), WN_DECIMAL(-0.8512462154), WN_DECIMAL(0.5446696133), WN_DECIMAL(0.9207601495),
	WN_DECIMAL(-0.9893091197), WN_DECIMAL(-0.9998680229), WN_DECIMAL(0.5617309299), WN_DECIMAL(-0.8277411985), WN_DECIMAL(0.545636467), WN_DECIMAL(0.1690223212), WN_DECIMAL(-0.5079295433), WN_DECIMAL(0.7685069899), WN_DECIMAL(-0.9630140787), WN_DECIMAL(0.9015219132), WN_DECIMAL(0.08905695279), WN_DECIMAL(-0.3423550559), WN_DECIMAL(-0.4661614943), WN_DECIMAL(-0.6449659371), WN_DECIMAL(0.7139388509), WN_DECIMAL(0.7472809229),
};

const WN_DECIMAL CELL_3D_X[] =
{
	WN_DECIMAL(0.3752498686), WN_DECIMAL(0.687188096), WN_DECIMAL(0.2248135212), WN_DECIMAL(0.6692006647), WN_DECIMAL(-0.4376476931), WN_DECIMAL(0.6139972552), WN_DECIMAL(0.9494563929), WN_DECIMAL(0.8065108882), WN_DECIMAL(-0.2218812853), WN_DECIMAL(0.8484661167), WN_DECIMAL(0.5551817596), WN_DECIMAL(0.2133903499), WN_DECIMAL(0.5195126593), WN_DECIMAL(-0.6440141975), WN_DECIMAL(-0.5192897331), WN_DECIMAL(-0.3697654077),
	WN_DECIMAL(-0.07927779647), WN_DECIMAL(0.4187757321), WN_DECIMAL(-0.750078731), WN_DECIMAL(0.6579554632), WN_DECIMAL(-0.6859803838), WN_DECIMAL(-0.6878407087), WN_DECIMAL(0.9490848347), WN_DECIMAL(0.5795829433), WN_DECIMAL(-0.5325976529), WN_DECIMAL(-0.1363699466), WN_DECIMAL(0.417665879), WN_DECIMAL(-0.9108236468), WN_DECIMAL(0.4438605427), WN_DECIMAL(0.819294887), WN_DECIMAL(-0.4033873915), WN_DECIMAL(-0.2817317705),
	WN_DECIMAL(0.3969665622), WN_DECIMAL(0.5323450134), WN_DECIMAL(-0.6833017297), WN_DECIMAL(0.3881436661), WN_DECIMAL(-0.7119144767), WN_DECIMAL(-0.2306979838), WN_DECIMAL(-0.9398873022), WN_DECIMAL(0.1701906676), WN_DECIMAL(-0.4261839496), WN_DECIMAL(-0.003712295499), WN_DECIMAL(-0.734675004), WN_DECIMAL(-0.3195046015), WN_DECIMAL(0.7345307424), WN_DECIMAL(0.9766246496), WN_DECIMAL(-0.02003735175), WN_DECIMAL(-0.4824156342),
	WN_DECIMAL(0.4245892007), WN_DECIMAL(0.9072427669), WN_DECIMAL(0.593346808), WN_DECIMAL(-0.8911762541), WN_DECIMAL(-0.7657571834), WN_DECIMAL(-0.5268198896), WN_DECIMAL(-0.8801903279), WN_DECIMAL(-0.6296409617), WN_DECIMAL(-0.09492481344), WN_DECIMAL(-0.4920470525), WN_DECIMAL(0.7307666154), WN_DECIMAL(-0.2514540636), WN_DECIMAL(-0.3356210347), WN_DECIMAL(-0.3522787894), WN_DECIMAL(0.87847885), WN_DECIMAL(-0.7424096346),
	WN_DECIMAL(0.5757585274), WN_DECIMAL(0.4519299338), WN_DECIMAL(0.6420368628), WN_DECIMAL(-0.1128478447), WN_DECIMAL(0.499874883), WN_DECIMAL(0.5291681739), WN_DECIMAL(-0.5098837195), WN_DECIMAL(0.5639583502), WN_DECIMAL(-0.8456386526), WN_DECIMAL(-0.9657134875), WN_DECIMAL(-0.576437342), WN_DECIMAL(-0.5666013014), WN_DECIMAL(0.5667702405), WN_DECIMAL(-0.481316582), WN_DECIMAL(0.7313389916), WN_DECIMAL(-0.3805628566),
	WN_DECIMAL(-0.6512675909), WN_DECIMAL(-0.2787156951), WN_DECIMAL(0.8648059114), WN_DECIMAL(-0.9730216276), WN_DECIMAL(-0.8335820906), WN_DECIMAL(0.2673159641), WN_DECIMAL(0.231150148), WN_DECIMAL(0.01286214638), WN_DECIMAL(0.6774953261), WN_DECIMAL(0.6542885718), WN_DECIMAL(-0.02545450161), WN_DECIMAL(0.2101238586), WN_DECIMAL(-0.5572105885), WN_DECIMAL(0.813705672), WN_DECIMAL(-0.7546026951), WN_DECIMAL(-0.2502500006),
	WN_DECIMAL(-0.9979289381), WN_DECIMAL(0.7024037039), WN_DECIMAL(0.08990874624), WN_DECIMAL(0.8170812432), WN_DECIMAL(0.4226980265), WN_DECIMAL(-0.2442153475), WN_DECIMAL(-0.9183326731), WN_DECIMAL(0.6068222411), WN_DECIMAL(0.818676691), WN_DECIMAL(-0.7236735282), WN_DECIMAL(-0.5383903295), WN_DECIMAL(-0.6269337242), WN_DECIMAL(-0.0939331121), WN_DECIMAL(0.9203878539), WN_DECIMAL(-0.7256396824), WN_DECIMAL(0.6292431149),
	WN_DECIMAL(0.4234156978), WN_DECIMAL(0.006685688024), WN_DECIMAL(-0.2598694113), WN_DECIMAL(0.6408036421), WN_DECIMAL(0.05899871622), WN_DECIMAL(0.7090281418), WN_DECIMAL(-0.5905222072), WN_DECIMAL(0.3128214264), WN_DECIMAL(-0.691925826), WN_DECIMAL(0.3634019349), WN_DECIMAL(-0.6772511147), WN_DECIMAL(-0.3204583896), WN_DECIMAL(-0.3906740409), WN_DECIMAL(-0.3342190395), WN_DECIMAL(-0.517779592), WN_DECIMAL(-0.6817711267),
	WN_DECIMAL(0.6422383105), WN_DECIMAL(0.4388482478), WN_DECIMAL(0.2968562611), WN_DECIMAL(-0.2019778353), WN_DECIMAL(0.6014865048), WN_DECIMAL(0.9519280722), WN_DECIMAL(0.3398889569), WN_DECIMAL(0.8179709354), WN_DECIMAL(0.2365522154), WN_DECIMAL(0.3262175096), WN_DECIMAL(-0.8060715954), WN_DECIMAL(-0.2068642503), WN_DECIMAL(0.6208057279), WN_DECIMAL(-0.5274282502), WN_DECIMAL(-0.3722334928), WN_DECIMAL(-0.8923412971),
	WN_DECIMAL(0.5341834201), WN_DECIMAL(-0.3663701513), WN_DECIMAL(-0.6114600319), WN_DECIMAL(0.5026307556), WN_DECIMAL(0.8396151729), WN_DECIMAL(0.9245042467), WN_DECIMAL(-0.7994843957), WN_DECIMAL(-0.5357200589), WN_DECIMAL(-0.6283359739), WN_DECIMAL(-0.61351886), WN_DECIMAL(-0.875632008), WN_DECIMAL(-0.5278879423), WN_DECIMAL(0.9087491985), WN_DECIMAL(-0.03500215466), WN_DECIMAL(-0.261365798), WN_DECIMAL(-0.579523541),
	WN_DECIMAL(-0.3765052689), WN_DECIMAL(-0.74398252), WN_DECIMAL(0.4257318052), WN_DECIMAL(-0.1214508921), WN_DECIMAL(0.8561809753), WN_DECIMAL(0.6802835104), WN_DECIMAL(-0.5452131039), WN_DECIMAL(-0.1997156478), WN_DECIMAL(0.4562348357), WN_DECIMAL(-0.811704301), WN_DECIMAL(0.67793962), WN_DECIMAL(-0.9237819106), WN_DECIMAL(0.6973511259), WN_DECIMAL(-0.5189506), WN_DECIMAL(0.5517320032), WN_DECIMAL(-0.396710831),
	WN_DECIMAL(0.5493762815), WN_DECIMAL(-0.2507853002), WN_DECIMAL(0.4788634005), WN_DECIMAL(0.387333516), WN_DECIMAL(-0.2176515694), WN_DECIMAL(0.6749832419), WN_DECIMAL(0.2148283022), WN_DECIMAL(-0.7521815872), WN_DECIMAL(0.4697000159), WN_DECIMAL(0.7890593699), WN_DECIMAL(-0.7606162952), WN_DECIMAL(0.01083397843), WN_DECIMAL(0.5254091908), WN_DECIMAL(-0.6748025877), WN_DECIMAL(0.751091524), WN_DECIMAL(0.05259056135),
	WN_DECIMAL(0.01889481232), WN_DECIMAL(-0.6037423727), WN_DECIMAL(-0.6542965129), WN_DECIMAL(0.08873301081), WN_DECIMAL(-0.6191345671), WN_DECIMAL(0.4331858488), WN_DECIMAL(-0.3858351946), WN_DECIMAL(-0.1429059747), WN_DECIMAL(0.4118221036), WN_DECIMAL(-0.6247153214), WN_DECIMAL(-0.611423014), WN_DECIMAL(0.5542939606), WN_DECIMAL(-0.9432768808), WN_DECIMAL(-0.4567870451), WN_DECIMAL(-0.7349133547), WN_DECIMAL(0.399304489),
	WN_DECIMAL(-0.7474927672), WN_DECIMAL(0.02589419753), WN_DECIMAL(0.783915821), WN_DECIMAL(0.6138668752), WN_DECIMAL(0.4276376047), WN_DECIMAL(-0.4347886353), WN_DECIMAL(0.02947841302), WN_DECIMAL(-0.833742746), WN_DECIMAL(0.3817221742), WN_DECIMAL(-0.8743368359), WN_DECIMAL(-0.3823443796), WN_DECIMAL(-0.6829243811), WN_DECIMAL(-0.3681903049), WN_DECIMAL(-0.367626833), WN_DECIMAL(-0.434583373), WN_DECIMAL(0.235891995),
	WN_DECIMAL(-0.6874880269), WN_DECIMAL(-0.5115661773), WN_DECIMAL(-0.5534962601), WN_DECIMAL(0.5632777056), WN_DECIMAL(0.686191532), WN_DECIMAL(-0.05095871588), WN_DECIMAL(-0.06865785057), WN_DECIMAL(-0.5975288531), WN_DECIMAL(-0.6429790056), WN_DECIMAL(-0.3729361548), WN_DECIMAL(0.2237917666), WN_DECIMAL(0.6046773225), WN_DECIMAL(-0.5041542295), WN_DECIMAL(-0.03972191174), WN_DECIMAL(0.7028828406), WN_DECIMAL(-0.5560856498),
	WN_DECIMAL(0.5898328456), WN_DECIMAL(-0.9308076766), WN_DECIMAL(0.4617069864), WN_DECIMAL(0.3190983137), WN_DECIMAL(0.9116567753), WN_DECIMAL(-0.45029554), WN_DECIMAL(0.3346334459), WN_DECIMAL(0.8525005645), WN_DECIMAL(0.2528483381), WN_DECIMAL(-0.8306630147), WN_DECIMAL(-0.6880390622), WN_DECIMAL(0.7448684026), WN_DECIMAL(-0.1963355843), WN_DECIMAL(-0.5900257974), WN_DECIMAL(0.9097057294), WN_DECIMAL(-0.2509196808),
};

const WN_DECIMAL CELL_3D_Y[] =
{
	WN_DECIMAL(-0.6760585049), WN_DECIMAL(-0.09136176499), WN_DECIMAL(0.1681325679), WN_DECIMAL(-0.6688468686), WN_DECIMAL(-0.4822753902), WN_DECIMAL(-0.7891068824), WN_DECIMAL(-0.1877509944), WN_DECIMAL(0.548470914), WN_DECIMAL(-0.463339443), WN_DECIMAL(-0.4050542082), WN_DECIMAL(0.3218158513), WN_DECIMAL(0.2546493823), WN_DECIMAL(-0.3753271935), WN_DECIMAL(0.4745384887), WN_DECIMAL(0.481254652), WN_DECIMAL(-0.8934416489),
	WN_DECIMAL(-0.6737085076), WN_DECIMAL(0.7469917228), WN_DECIMAL(0.3826230411), WN_DECIMAL(0.6751013678), WN_DECIMAL(-0.7248119515), WN_DECIMAL(-0.3224276742), WN_DECIMAL(-0.02076190936), WN_DECIMAL(-0.6404268166), WN_DECIMAL(-0.5292028444), WN_DECIMAL(0.7151414636), WN_DECIMAL(-0.6144655059), WN_DECIMAL(-0.369912124), WN_DECIMAL(0.6942067212), WN_DECIMAL(-0.4481558248), WN_DECIMAL(-0.6366894559), WN_DECIMAL(0.5956568471),
	WN_DECIMAL(0.564274539), WN_DECIMAL(0.7145584688), WN_DECIMAL(0.6871918316), WN_DECIMAL(0.5657918509), WN_DECIMAL(-0.6275978114), WN_DECIMAL(0.4146983062), WN_DECIMAL(0.2638993789), WN_DECIMAL(-0.792633138), WN_DECIMAL(0.5706133514), WN_DECIMAL(0.8606546462), WN_DECIMAL(0.6490900316), WN_DECIMAL(-0.8242699196), WN_DECIMAL(0.6765819124), WN_DECIMAL(0.1959534069), WN_DECIMAL(-0.8426769757), WN_DECIMAL(-0.5917672797),
	WN_DECIMAL(0.7517364266), WN_DECIMAL(0.03252559226), WN_DECIMAL(0.0883617105), WN_DECIMAL(0.4475064813), WN_DECIMAL(-0.1418643552), WN_DECIMAL(0.7343428473), WN_DECIMAL(0.3870192548), WN_DECIMAL(-0.7716703522), WN_DECIMAL(0.4839898327), WN_DECIMAL(0.7437439055), WN_DECIMAL(-0.5989573348), WN_DECIMAL(-0.8357068955), WN_DECIMAL(0.6086049038), WN_DECIMAL(0.9194627258), WN_DECIMAL(0.4718297238), WN_DECIMAL(-0.2650335884),
	WN_DECIMAL(-0.6470352599), WN_DECIMAL(-0.5555181303), WN_DECIMAL(0.1222351235), WN_DECIMAL(0.7802044684), WN_DECIMAL(-0.8636947022), WN_DECIMAL(-0.2341352163), WN_DECIMAL(0.683030874), WN_DECIMAL(-0.5005858287), WN_DECIMAL(0.2334616211), WN_DECIMAL(0.2576877608), WN_DECIMAL(0.6666816727), WN_DECIMAL(-0.7663996863), WN_DECIMAL(0.794201982), WN_DECIMAL(0.6189308788), WN_DECIMAL(0.6071033261), WN_DECIMAL(-0.4206058253),
	WN_DECIMAL(-0.3957336915), WN_DECIMAL(-0.8170257484), WN_DECIMAL(-0.1043240417), WN_DECIMAL(0.0002167596213), WN_DECIMAL(0.1816339018), WN_DECIMAL(-0.6838094939), WN_DECIMAL(-0.2495341969), WN_DECIMAL(-0.7116756954), WN_DECIMAL(-0.03361673621), WN_DECIMAL(-0.3350836431), WN_DECIMAL(0.2137186039), WN_DECIMAL(0.2557996786), WN_DECIMAL(0.7490117093), WN_DECIMAL(0.4942936549), WN_DECIMAL(-0.352686853), WN_DECIMAL(-0.3952445435),
	WN_DECIMAL(-0.0459964767), WN_DECIMAL(-0.7115787471), WN_DECIMAL(0.08022899756), WN_DECIMAL(0.5362268157), WN_DECIMAL(-0.8258613686), WN_DECIMAL(0.1114171723), WN_DECIMAL(0.3882823051), WN_DECIMAL(-0.7915404457), WN_DECIMAL(0.3250957662), WN_DECIMAL(0.6401346464), WN_DECIMAL(-0.2662724517), WN_DECIMAL(-0.6727907114), WN_DECIMAL(-0.994730818), WN_DECIMAL(-0.3596358977), WN_DECIMAL(0.2344610069), WN_DECIMAL(-0.6645215546),
	WN_DECIMAL(-0.7107590611), WN_DECIMAL(-0.4646617327), WN_DECIMAL(0.6717191355), WN_DECIMAL(0.5101893498), WN_DECIMAL(0.1185768238), WN_DECIMAL(0.236005093), WN_DECIMAL(-0.7811024061), WN_DECIMAL(0.5089325193), WN_DECIMAL(0.6073187658), WN_DECIMAL(-0.7930732557), WN_DECIMAL(-0.6822767155), WN_DECIMAL(0.3201532885), WN_DECIMAL(0.7545302807), WN_DECIMAL(0.1072664448), WN_DECIMAL(0.6784033173), WN_DECIMAL(-0.6595924967),
	WN_DECIMAL(0.7276509498), WN_DECIMAL(0.5586689436), WN_DECIMAL(-0.6498636788), WN_DECIMAL(0.6789333174), WN_DECIMAL(0.7105966551), WN_DECIMAL(-0.2872214155), WN_DECIMAL(0.496746217), WN_DECIMAL(-0.3880337977), WN_DECIMAL(0.7324070604), WN_DECIMAL(-0.9326634749), WN_DECIMAL(-0.5867839255), WN_DECIMAL(0.8003043651), WN_DECIMAL(-0.1631882481), WN_DECIMAL(-0.6796374681), WN_DECIMAL(-0.8066678503), WN_DECIMAL(0.4238177418),
	WN_DECIMAL(0.7715863549), WN_DECIMAL(0.5455367347), WN_DECIMAL(-0.03205115397), WN_DECIMAL(-0.6005545066), WN_DECIMAL(-0.5423640002), WN_DECIMAL(0.3569205906), WN_DECIMAL(-0.582071752), WN_DECIMAL(0.6407354361), WN_DECIMAL(0.7777142984), WN_DECIMAL(-0.09956428618), WN_DECIMAL(0.1100002681), WN_DECIMAL(0.8136349123), WN_DECIMAL(0.2923431904), WN_DECIMAL(0.9735794425), WN_DECIMAL(0.8324974864), WN_DECIMAL(-0.6179617717),
	WN_DECIMAL(-0.9248386523), WN_DECIMAL(-0.6448780771), WN_DECIMAL(-0.5274402761), WN_DECIMAL(-0.7862170565), WN_DECIMAL(0.2682099744), WN_DECIMAL(-0.5848777694), WN_DECIMAL(-0.6364561467), WN_DECIMAL(-0.7167402514), WN_DECIMAL(-0.8677012494), WN_DECIMAL(0.4205286707), WN_DECIMAL(-0.7007832749), WN_DECIMAL(0.243272451), WN_DECIMAL(-0.1899846085), WN_DECIMAL(-0.6146124977), WN_DECIMAL(-0.8093357692), WN_DECIMAL(-0.03545096987),
	WN_DECIMAL(-0.7191590868), WN_DECIMAL(0.7478645848), WN_DECIMAL(0.3623517328), WN_DECIMAL(0.8436992512), WN_DECIMAL(-0.2445711729), WN_DECIMAL(0.6897356637), WN_DECIMAL(-0.1708070787), WN_DECIMAL(0.4639272368), WN_DECIMAL(-0.7917186656), WN_DECIMAL(0.02980025428), WN_DECIMAL(0.6334156172), WN_DECIMAL(-0.9815544807), WN_DECIMAL(-0.2307217304), WN_DECIMAL(0.1080823318), WN_DECIMAL(0.5167601798), WN_DECIMAL(-0.845120016),
	WN_DECIMAL(0.441572562), WN_DECIMAL(0.5876789172), WN_DECIMAL(-0.6365908737), WN_DECIMAL(0.68350166), WN_DECIMAL(0.5849723959), WN_DECIMAL(0.1164114357), WN_DECIMAL(-0.7379813884), WN_DECIMAL(-0.9613237178), WN_DECIMAL(-0.9071943084), WN_DECIMAL(-0.7682111105), WN_DECIMAL(0.639074459), WN_DECIMAL(-0.619358298), WN_DECIMAL(0.2807257131), WN_DECIMAL(-0.01800868791), WN_DECIMAL(0.3776607289), WN_DECIMAL(0.7207567823),
	WN_DECIMAL(0.5536661486), WN_DECIMAL(-0.9974053117), WN_DECIMAL(-0.02047200006), WN_DECIMAL(-0.6739453804), WN_DECIMAL(-0.5607471297), WN_DECIMAL(0.8815553192), WN_DECIMAL(0.8275977415), WN_DECIMAL(0.3928902456), WN_DECIMAL(0.550991396), WN_DECIMAL(0.4247623676), WN_DECIMAL(-0.3436948871), WN_DECIMAL(-0.3653537677), WN_DECIMAL(0.3181702902), WN_DECIMAL(-0.6067173171), WN_DECIMAL(-0.8984128477), WN_DECIMAL(0.4220839766),
	WN_DECIMAL(0.7238407199), WN_DECIMAL(-0.7766913695), WN_DECIMAL(0.6460037842), WN_DECIMAL(0.2544775664), WN_DECIMAL(0.6488840578), WN_DECIMAL(0.805016833), WN_DECIMAL(-0.9183807036), WN_DECIMAL(0.4144046357), WN_DECIMAL(0.270587208), WN_DECIMAL(-0.8813684494), WN_DECIMAL(0.6985971877), WN_DECIMAL(-0.7795603017), WN_DECIMAL(-0.8624480731), WN_DECIMAL(0.5532697017), WN_DECIMAL(0.711179521), WN_DECIMAL(-0.7798160574),
	WN_DECIMAL(0.5225859041), WN_DECIMAL(0.1261859368), WN_DECIMAL(0.3398033582), WN_DECIMAL(-0.7472173667), WN_DECIMAL(-0.4032647119), WN_DECIMAL(-0.4246578154), WN_DECIMAL(0.8481212377), WN_DECIMAL(-0.2144838537), WN_DECIMAL(0.3431714491), WN_DECIMAL(0.5310188231), WN_DECIMAL(0.6682978632), WN_DECIMAL(0.3110433206), WN_DECIMAL(0.9263293599), WN_DECIMAL(-0.6155600569), WN_DECIMAL(0.07169784399), WN_DECIMAL(0.8985888773),
};

const WN_DECIMAL CELL_3D_Z[] =
{
	WN_DECIMAL(-0.6341391283), WN_DECIMAL(-0.7207118346), WN_DECIMAL(0.9597866014), WN_DECIMAL(0.3237504235), WN_DECIMAL(-0.7588642466), WN_DECIMAL(-0.01782410481), WN_DECIMAL(0.2515593809), WN_DECIMAL(0.2207257205), WN_DECIMAL(-0.8579541106), WN_DECIMAL(0.3406410681), WN_DECIMAL(0.7669470462), WN_DECIMAL(-0.9431957648), WN_DECIMAL(0.7676171537), WN_DECIMAL(-0.6000491115), WN_DECIMAL(-0.7062096948), WN_DECIMAL(0.2550207115),
	WN_DECIMAL(0.7347325213), WN_DECIMAL(0.5163625202), WN_DECIMAL(-0.5394270162), WN_DECIMAL(0.3336656285), WN_DECIMAL(-0.0638635111), WN_DECIMAL(-0.6503195787), WN_DECIMAL(0.3143356798), WN_DECIMAL(-0.5039217245), WN_DECIMAL(0.6605180464), WN_DECIMAL(-0.6855479011), WN_DECIMAL(-0.6693185756), WN_DECIMAL(0.1832083647), WN_DECIMAL(-0.5666258437), WN_DECIMAL(0.3576482138), WN_DECIMAL(-0.6571949095), WN_DECIMAL(-0.7522101635),
	WN_DECIMAL(-0.7238865886), WN_DECIMAL(0.4538887323), WN_DECIMAL(0.2467106257), WN_DECIMAL(0.7274778869), WN_DECIMAL(0.3151170655), WN_DECIMAL(-0.8802293764), WN_DECIMAL(-0.2167232729), WN_DECIMAL(0.5854637865), WN_DECIMAL(0.7019741052), WN_DECIMAL(0.5091756071), WN_DECIMAL(0.1973189533), WN_DECIMAL(0.46743546), WN_DECIMAL(0.05197599597), WN_DECIMAL(0.088354718), WN_DECIMAL(0.5380464843), WN_DECIMAL(-0.6458224544),
	WN_DECIMAL(-0.5045952393), WN_DECIMAL(0.419347884), WN_DECIMAL(0.8000823542), WN_DECIMAL(-0.07445020656), WN_DECIMAL(-0.6272881641), WN_DECIMAL(-0.428020311), WN_DECIMAL(-0.2747382083), WN_DECIMAL(-0.08987283726), WN_DECIMAL(0.8699098354), WN_DECIMAL(0.4524761885), WN_DECIMAL(-0.3274603257), WN_DECIMAL(0.4882262167), WN_DECIMAL(-0.7189983256), WN_DECIMAL(0.1746079907), WN_DECIMAL(0.0751772698), WN_DECIMAL(-0.6152927202),
	WN_DECIMAL(0.4998474673), WN_DECIMAL(-0.6979677227), WN_DECIMAL(0.7568667263), WN_DECIMAL(-0.6152612058), WN_DECIMAL(0.06447140991), WN_DECIMAL(-0.8155744872), WN_DECIMAL(-0.5229602449), WN_DECIMAL(0.6567836838), WN_DECIMAL(-0.4799905631), WN_DECIMAL(0.03153534591), WN_DECIMAL(0.4724992466), WN_DECIMAL(-0.3026458097), WN_DECIMAL(-0.2191225827), WN_DECIMAL(-0.620692287), WN_DECIMAL(0.3107552588), WN_DECIMAL(0.8235670294),
	WN_DECIMAL(0.6474915988), WN_DECIMAL(-0.5047637941), WN_DECIMAL(0.4911488878), WN_DECIMAL(-0.2307138167), WN_DECIMAL(-0.5216800015), WN_DECIMAL(0.6789305939), WN_DECIMAL(0.9403734863), WN_DECIMAL(0.702390397), WN_DECIMAL(0.7347584625), WN_DECIMAL(0.6779567958), WN_DECIMAL(0.9765635805), WN_DECIMAL(-0.9436177661), WN_DECIMAL(-0.358465925), WN_DECIMAL(-0.3058706624), WN_DECIMAL(0.5533414464), WN_DECIMAL(-0.8838306897),
	WN_DECIMAL(0.04496841812), WN_DECIMAL(0.01687374963), WN_DECIMAL(-0.9927133148), WN_DECIMAL(-0.211752318), WN_DECIMAL(0.3732015249), WN_DECIMAL(0.9632990593), WN_DECIMAL(-0.07682417004), WN_DECIMAL(-0.07232213047), WN_DECIMAL(0.4733721775), WN_DECIMAL(0.2579229713), WN_DECIMAL(0.7995216286), WN_DECIMAL(0.3928189967), WN_DECIMAL(0.04107517667), WN_DECIMAL(0.1534542912), WN_DECIMAL(0.6468965045), WN_DECIMAL(0.4030684878),
	WN_DECIMAL(-0.5617300988), WN_DECIMAL(-0.885463029), WN_DECIMAL(0.693729985), WN_DECIMAL(-0.5736527866), WN_DECIMAL(-0.9911905409), WN_DECIMAL(-0.66451538), WN_DECIMAL(0.2028855685), WN_DECIMAL(0.8019541421), WN_DECIMAL(-0.3903877149), WN_DECIMAL(-0.4888495114), WN_DECIMAL(-0.2753714057), WN_DECIMAL(-0.8915202143), WN_DECIMAL(0.5273119089), WN_DECIMAL(0.9363714773), WN_DECIMAL(-0.5212228249), WN_DECIMAL(-0.31642672),
	WN_DECIMAL(0.2409440761), WN_DECIMAL(-0.703776404), WN_DECIMAL(-0.6996810411), WN_DECIMAL(-0.7058714505), WN_DECIMAL(-0.3650566783), WN_DECIMAL(0.1064744278), WN_DECIMAL(0.7985729102), WN_DECIMAL(0.424680257), WN_DECIMAL(-0.6384535592), WN_DECIMAL(0.1540161646), WN_DECIMAL(-0.07702731943), WN_DECIMAL(-0.5627789132), WN_DECIMAL(-0.7667919169), WN_DECIMAL(-0.509815999), WN_DECIMAL(0.4590525092), WN_DECIMAL(0.1552595611),
	WN_DECIMAL(0.345402042), WN_DECIMAL(0.7537656024), WN_DECIMAL(0.7906259247), WN_DECIMAL(-0.6218493452), WN_DECIMAL(0.02979350071), WN_DECIMAL(-0.1337893489), WN_DECIMAL(-0.1483818606), WN_DECIMAL(0.549965562), WN_DECIMAL(0.01882482408), WN_DECIMAL(-0.7833783002), WN_DECIMAL(0.4702855809), WN_DECIMAL(0.2435827372), WN_DECIMAL(0.2978428332), WN_DECIMAL(0.2256499906), WN_DECIMAL(0.4885036897), WN_DECIMAL(0.5312962584),
	WN_DECIMAL(0.05401156992), WN_DECIMAL(0.1749922158), WN_DECIMAL(-0.7352273018), WN_DECIMAL(0.6058980284), WN_DECIMAL(0.4416079111), WN_DECIMAL(0.4417378638), WN_DECIMAL(0.5455879807), WN_DECIMAL(-0.6681295324), WN_DECIMAL(0.1973431441), WN_DECIMAL(0.4053292055), WN_DECIMAL(0.2220375492), WN_DECIMAL(0.2957118467), WN_DECIMAL(0.6910913512), WN_DECIMAL(0.5940890106), WN_DECIMAL(-0.2014135283), WN_DECIMAL(-0.9172588213),
	WN_DECIMAL(-0.4254361401), WN_DECIMAL(-0.6146586825), WN_DECIMAL(-0.7996193253), WN_DECIMAL(-0.3716777111), WN_DECIMAL(-0.9448876842), WN_DECIMAL(-0.2620349924), WN_DECIMAL(0.9615995749), WN_DECIMAL(-0.4679683524), WN_DECIMAL(0.3905937144), WN_DECIMAL(0.613593722), WN_DECIMAL(0.1422937358), WN_DECIMAL(0.1908754211), WN_DECIMAL(0.8189704912), WN_DECIMAL(-0.7300408736), WN_DECIMAL(-0.4108776451), WN_DECIMAL(-0.5319834504),
	WN_DECIMAL(-0.8970265651), WN_DECIMAL(-0.5386359045), WN_DECIMAL(0.4082255906), WN_DECIMAL(0.7245356676), WN_DECIMAL(0.5239080873), WN_DECIMAL(-0.8937552226), WN_DECIMAL(-0.553637673), WN_DECIMAL(0.2354455182), WN_DECIMAL(-0.0860293075), WN_DECIMAL(-0.1399373318), WN_DECIMAL(-0.4666323327), WN_DECIMAL(0.5560157407), WN_DECIMAL(0.1772619533), WN_DECIMAL(-0.8893937725), WN_DECIMAL(-0.5632714576), WN_DECIMAL(-0.5666264959),
	WN_DECIMAL(-0.3670263736), WN_DECIMAL(-0.06717242579), WN_DECIMAL(0.6205295181), WN_DECIMAL(-0.4110536264), WN_DECIMAL(0.7090054553), WN_DECIMAL(0.183899597), WN_DECIMAL(-0.5605470555), WN_DECIMAL(0.3879565548), WN_DECIMAL(0.7420893903), WN_DECIMAL(-0.2347595118), WN_DECIMAL(-0.8577217497), WN_DECIMAL(0.6325590203), WN_DECIMAL(-0.8736152276), WN_DECIMAL(0.7048011129), WN_DECIMAL(-0.06317948268), WN_DECIMAL(0.8753285574),
	WN_DECIMAL(-0.05843650473), WN_DECIMAL(-0.3674922622), WN_DECIMAL(-0.5256624401), WN_DECIMAL(0.7861039337), WN_DECIMAL(0.3287714416), WN_DECIMAL(0.5910593099), WN_DECIMAL(-0.3896960134), WN_DECIMAL(0.6864605361), WN_DECIMAL(0.7164918431), WN_DECIMAL(-0.290014277), WN_DECIMAL(-0.6796169617), WN_DECIMAL(0.1632515592), WN_DECIMAL(0.04485347486), WN_DECIMAL(0.8320545697), WN_DECIMAL(0.01339408056), WN_DECIMAL(-0.2874989857),
	WN_DECIMAL(0.615630723), WN_DECIMAL(0.3430367014), WN_DECIMAL(0.8193658136), WN_DECIMAL(-0.5829600957), WN_DECIMAL(0.07911697781), WN_DECIMAL(0.7854296063), WN_DECIMAL(-0.4107442306), WN_DECIMAL(0.4766964066), WN_DECIMAL(-0.9045999527), WN_DECIMAL(-0.1673856787), WN_DECIMAL(0.2828077348), WN_DECIMAL(-0.5902737632), WN_DECIMAL(-0.321506229), WN_DECIMAL(-0.5224513133), WN_DECIMAL(-0.4090169985), WN_DECIMAL(-0.3599685311),
};

WN_INLINE void WasmNoise::SetCellularDistance2Indices(int32 _cellularDistanceIndex0, int32 _cellularDistanceIndex1)
{
  cellularDistanceIndex0 = min(_cellularDistanceIndex0, _cellularDistanceIndex1);
  cellularDistanceIndex1 = max(_cellularDistanceIndex0, _cellularDistanceIndex1);

  cellularDistanceIndex0 = min(max(cellularDistanceIndex0, 0), CellularDistanceIndexMax);
  cellularDistanceIndex1 = min(max(cellularDistanceIndex1, 0), CellularDistanceIndexMax);
}

// Single Noise Function Section *******************************
// These functions are required for both regular and fractal cellular noise

// 2D
WN_INLINE WN_DECIMAL WasmNoise::SingleCellular(uint8 offset, WN_DECIMAL x, WN_DECIMAL y) const
{
  int32 xr = FastRound(x);
  int32 yr = FastRound(y);

  WN_DECIMAL distance = 999999;
  int32 xc, yc;

  switch(cellularDistanceFunction)
  {
  default:
  case CellularDistanceFunction::Euclidean:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        uint8 lutPos = Index2D_256(offset, xi, yi);

        WN_DECIMAL vecX = xi - x + CELL_2D_X[lutPos] * cellularJitter;
        WN_DECIMAL vecY = yi - y + CELL_2D_Y[lutPos] * cellularJitter;

        WN_DECIMAL newDistance = vecX*vecX + vecY*vecY;

        if(newDistance < distance)
        {
          distance = newDistance;
          xc = xi;
          yc = yi;
        }
      }
    }
    break;
  }
  case CellularDistanceFunction::Manhattan:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        uint8 lutPos = Index2D_256(offset, xi, yi);

        WN_DECIMAL vecX = xi - x + CELL_2D_X[lutPos] * cellularJitter;
        WN_DECIMAL vecY = yi - y + CELL_2D_Y[lutPos] * cellularJitter;

        WN_DECIMAL newDistance = (FastAbs(vecX) + FastAbs(vecY));

        if(newDistance < distance)
        {
          distance = newDistance;
          xc = xi;
          yc = yi;
        }
      }
    }
    break;
  }
  case CellularDistanceFunction::Natural:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        uint8 lutPos = Index2D_256(offset, xi, yi);

        WN_DECIMAL vecX = xi - x + CELL_2D_X[lutPos] * cellularJitter;
        WN_DECIMAL vecY = yi - y + CELL_2D_Y[lutPos] * cellularJitter;

        WN_DECIMAL newDistance = (FastAbs(vecX) + FastAbs(vecY)) + (vecX*vecX + vecY*vecY);

        if(newDistance < distance)
        {
          distance = newDistance;
          xc = xi;
          yc = yi;
        }
      }
    }
    break;
  }    
  }

  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  {
    return ValCoord2D(seed, xc, yc);
  }
#ifdef WN_INCLUDE_PERLIN
  case CellularReturnType::NoiseLookupPerlin:
  {
    uint8 lutPos = Index2D_256(offset, xc, yc);
    return SinglePerlin(offset, (xc + CELL_2D_X[lutPos] * cellularJitter) * cellularNoiseLookupFrequency, (yc + CELL_2D_Y[lutPos] * cellularJitter) * cellularNoiseLookupFrequency);
  }
#endif // WN_INCLUDE_PERLIN
#ifdef WN_INCLUDE_SIMPLEX
  case CellularReturnType::NoiseLookupSimplex:
  {
    uint8 lutPos = Index2D_256(offset, xc, yc);
    return SingleSimplex(offset, (xc + CELL_2D_X[lutPos] * cellularJitter) * cellularNoiseLookupFrequency, (yc + CELL_2D_Y[lutPos] * cellularJitter) * cellularNoiseLookupFrequency);
  }
#endif
  case CellularReturnType::Distance:
  {
    return distance;
  }
  default: return 0;
  }  
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellular2Edge(uint8 offset, WN_DECIMAL x, WN_DECIMAL y) const
{
  int32 xr = FastRound(x);
  int32 yr = FastRound(y);

  WN_DECIMAL distance[CellularDistanceIndexMax + 1] = { 999999, 999999, 999999, 999999 };

  switch(cellularDistanceFunction)
  {
  default:
  case CellularDistanceFunction::Euclidean:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        uint8 lutPos = Index2D_256(offset, xi, yi);

        WN_DECIMAL vecX = xi - x + CELL_2D_X[lutPos] * cellularJitter;
        WN_DECIMAL vecY = yi - y + CELL_2D_Y[lutPos] * cellularJitter;

        WN_DECIMAL newDistance = vecX*vecX + vecY*vecY;

        for(int32 i = cellularDistanceIndex1; i > 0; i--)
        {
          distance[i] = max(min(distance[i], newDistance), distance[i - 1]);
        }
        distance[0] = min(distance[0], newDistance);
      }
    }
  }
  break;
  case CellularDistanceFunction::Manhattan:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        uint8 lutPos = Index2D_256(offset, xi, yi);
        
        WN_DECIMAL vecX = xi - x + CELL_2D_X[lutPos] * cellularJitter;
        WN_DECIMAL vecY = yi - y + CELL_2D_Y[lutPos] * cellularJitter;

        WN_DECIMAL newDistance = FastAbs(vecX) + FastAbs(vecY);

        for(int32 i = cellularDistanceIndex1; i > 0; i--)
        {
          distance[i] = max(min(distance[i], newDistance), distance[i - 1]);
        }
        distance[0] = min(distance[0], newDistance);
      }
    }
  }
  break;
  case CellularDistanceFunction::Natural:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        uint8 lutPos = Index2D_256(offset, xi, yi);

        WN_DECIMAL vecX = xi - x + CELL_2D_X[lutPos] * cellularJitter;
        WN_DECIMAL vecY = yi - y + CELL_2D_Y[lutPos] * cellularJitter;

        WN_DECIMAL newDistance = (FastAbs(vecX) + FastAbs(vecY)) + (vecX*vecX + vecY*vecY);

        for(int32 i = cellularDistanceIndex1; i > 0; i--)
        {
          distance[i] = max(min(distance[i], newDistance), distance[i - 1]);
        }
        distance[0] = min(distance[0], newDistance);
      }
    }
  }
  break;
  }

  switch(cellularReturnType)
  {
  case CellularReturnType::Distance2:     return distance[cellularDistanceIndex1];
  case CellularReturnType::Distance2Add:  return distance[cellularDistanceIndex1] + distance[cellularDistanceIndex0];
  case CellularReturnType::Distance2Sub:  return distance[cellularDistanceIndex1] - distance[cellularDistanceIndex0];
  case CellularReturnType::Distance2Mul:  return distance[cellularDistanceIndex1] * distance[cellularDistanceIndex0];
  case CellularReturnType::Distance2Div:  return distance[cellularDistanceIndex0] / distance[cellularDistanceIndex1];
  default: return 0;
  }
}

// 3D
WN_INLINE WN_DECIMAL WasmNoise::SingleCellular(uint8 offset, WN_DECIMAL x, WN_DECIMAL y, WN_DECIMAL z) const
{
  int32 xr = FastRound(x);
  int32 yr = FastRound(y);
  int32 zr = FastRound(z);

  WN_DECIMAL distance = 999999;
  int32 xc, yc, zc;

  switch(cellularDistanceFunction)
  {
  default:
  case CellularDistanceFunction::Euclidean:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        for(int32 zi = zr - 1; zi <= zr + 1; zi++)
        {
          uint8 lutPos = Index3D_256(offset, xi, yi, zi);

          WN_DECIMAL vecX = xi - x + CELL_3D_X[lutPos] * cellularJitter;
          WN_DECIMAL vecY = yi - y + CELL_3D_Y[lutPos] * cellularJitter;
          WN_DECIMAL vecZ = zi - z + CELL_3D_Z[lutPos] * cellularJitter;

          WN_DECIMAL newDistance = vecX*vecX + vecY*vecY + vecZ*vecZ;

          if(newDistance < distance)
          {
            distance = newDistance;
            xc = xi;
            yc = yi;
            zc = zi;
          }
        }
      }
    }
    break;
  }
  case CellularDistanceFunction::Manhattan:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        for(int32 zi = zr - 1; zi <= zr + 1; zi++)
        {
          uint8 lutPos = Index3D_256(offset, xi, yi, zi);

          WN_DECIMAL vecX = xi - x + CELL_3D_X[lutPos] * cellularJitter;
          WN_DECIMAL vecY = yi - y + CELL_3D_Y[lutPos] * cellularJitter;
          WN_DECIMAL vecZ = zi - z + CELL_3D_Z[lutPos] * cellularJitter;

          WN_DECIMAL newDistance = (FastAbs(vecX) + FastAbs(vecY) + FastAbs(vecZ));

          if(newDistance < distance)
          {
            distance = newDistance;
            xc = xi;
            yc = yi;
            zc = zi;
          }
        }
      }
    }
    break;
  }
  case CellularDistanceFunction::Natural:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        for(int32 zi = zr - 1; zi <= zr + 1; zi++)
        {
          uint8 lutPos = Index3D_256(offset, xi, yi, zi);

          WN_DECIMAL vecX = xi - x + CELL_3D_X[lutPos] * cellularJitter;
          WN_DECIMAL vecY = yi - y + CELL_3D_Y[lutPos] * cellularJitter;
          WN_DECIMAL vecZ = zi - z + CELL_3D_Z[lutPos] * cellularJitter;

          WN_DECIMAL newDistance = (FastAbs(vecX) + FastAbs(vecY) + FastAbs(vecZ)) + (vecX*vecX + vecY*vecY + vecZ*vecZ);

          if(newDistance < distance)
          {
            distance = newDistance;
            xc = xi;
            yc = yi;
            zc = zi;
          }
        }
      }
    }
    break;
  }    
  }

  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  {
    return ValCoord3D(seed, xc, yc, zc);
  }
#ifdef WN_INCLUDE_PERLIN
  case CellularReturnType::NoiseLookupPerlin:
  {
    uint8 lutPos = Index3D_256(offset, xc, yc, zc);
    return SinglePerlin(offset, (xc + CELL_3D_X[lutPos] * cellularJitter) * cellularNoiseLookupFrequency, (yc + CELL_3D_Y[lutPos] * cellularJitter) * cellularNoiseLookupFrequency, (zc + CELL_3D_Z[lutPos] * cellularJitter) * cellularNoiseLookupFrequency);
  }
#endif // WN_INCLUDE_PERLIN
#ifdef WN_INCLUDE_SIMPLEX
  case CellularReturnType::NoiseLookupSimplex:
  {
    uint8 lutPos = Index3D_256(offset, xc, yc, zc);
    return SingleSimplex(offset, (xc + CELL_3D_X[lutPos] * cellularJitter) * cellularNoiseLookupFrequency, (yc + CELL_3D_Y[lutPos] * cellularJitter) * cellularNoiseLookupFrequency, (zc + CELL_3D_Z[lutPos] * cellularJitter) * cellularNoiseLookupFrequency);
  }
#endif
  case CellularReturnType::Distance:
  {
    return distance;
  }
  default: return 0;
  }  
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellular2Edge(uint8 offset, WN_DECIMAL x, WN_DECIMAL y, WN_DECIMAL z) const
{
  int32 xr = FastRound(x);
  int32 yr = FastRound(y);
  int32 zr = FastRound(z);

  WN_DECIMAL distance[CellularDistanceIndexMax + 1] = { 999999,999999,999999,999999 };

  switch(cellularDistanceFunction)
  {
  case CellularDistanceFunction::Euclidean:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        for(int32 zi = zr - 1; zi <= zr + 1; zi++)
        {
          uint8 lutPos = Index3D_256(offset, xi, yi, zi);

          WN_DECIMAL vecX = xi - x + CELL_3D_X[lutPos] * cellularJitter;
          WN_DECIMAL vecY = yi - y + CELL_3D_Y[lutPos] * cellularJitter;
          WN_DECIMAL vecZ = zi - z + CELL_3D_Z[lutPos] * cellularJitter;

          WN_DECIMAL newDistance = vecX*vecX + vecY*vecY + vecZ*vecZ;

          for(int32 i = cellularDistanceIndex1; i > 0; i--)
          {
            distance[i] = max(min(distance[i], newDistance), distance[i - 1]);
          }
          distance[0] = min(distance[0], newDistance);
        }
      }
    }
  }
  break;  
  case CellularDistanceFunction::Manhattan:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        for(int32 zi = zr - 1; zi <= zr + 1; zi++)
        {
          uint8 lutPos = Index3D_256(offset, xi, yi, zi);

          WN_DECIMAL vecX = xi - x + CELL_3D_X[lutPos] * cellularJitter;
          WN_DECIMAL vecY = yi - y + CELL_3D_Y[lutPos] * cellularJitter;
          WN_DECIMAL vecZ = zi - z + CELL_3D_Z[lutPos] * cellularJitter;

          WN_DECIMAL newDistance = FastAbs(vecX) + FastAbs(vecY) + FastAbs(vecZ);

          for(int32 i = cellularDistanceIndex1; i > 0; i--)
          {
            distance[i] = max(min(distance[i], newDistance), distance[i - 1]);
          }
          distance[0] = min(distance[0], newDistance);
        }
      }
    }
  }
  break; 
  case CellularDistanceFunction::Natural:
  {
    for(int32 xi = xr - 1; xi <= xr + 1; xi++)
    {
      for(int32 yi = yr - 1; yi <= yr + 1; yi++)
      {
        for(int32 zi = zr - 1; zi <= zr + 1; zi++)
        {
          uint8 lutPos = Index3D_256(offset, xi, yi, zi);

          WN_DECIMAL vecX = xi - x + CELL_3D_X[lutPos] * cellularJitter;
          WN_DECIMAL vecY = yi - y + CELL_3D_Y[lutPos] * cellularJitter;
          WN_DECIMAL vecZ = zi - z + CELL_3D_Z[lutPos] * cellularJitter;

          WN_DECIMAL newDistance = ((FastAbs(vecX) + FastAbs(vecY) + FastAbs(vecZ)) + (vecX*vecX + vecY*vecY + vecZ*vecZ));

          for(int32 i = cellularDistanceIndex1; i > 0; i--)
          {
            distance[i] = max(min(distance[i], newDistance), distance[i - 1]);
          }
          distance[0] = min(distance[0], newDistance);
        }
      }
    }
  }
  break;
  }

  switch(cellularReturnType)
  {
  case CellularReturnType::Distance2:     return distance[cellularDistanceIndex1];
  case CellularReturnType::Distance2Add:  return distance[cellularDistanceIndex1] + distance[cellularDistanceIndex0];
  case CellularReturnType::Distance2Sub:  return distance[cellularDistanceIndex1] - distance[cellularDistanceIndex0];
  case CellularReturnType::Distance2Mul:  return distance[cellularDistanceIndex1] * distance[cellularDistanceIndex0];
  case CellularReturnType::Distance2Div:  return distance[cellularDistanceIndex0] / distance[cellularDistanceIndex1];
  default: return 0;
  }
}

#ifdef WN_INCLUDE_CELLULAR_FRACTAL
// 2D Cellular Fractal Functions
WN_INLINE WN_DECIMAL WasmNoise::SingleCellularFractalFBM(WN_DECIMAL x, WN_DECIMAL y)
{
  return SingleFractalFBM<Single2DFPtr>(&WasmNoise::SingleCellular, x, y);
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellularFractalBillow(WN_DECIMAL x, WN_DECIMAL y)
{
  return SingleFractalBillow<Single2DFPtr>(&WasmNoise::SingleCellular, x, y);
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellularFractalRidgedMulti(WN_DECIMAL x, WN_DECIMAL y)
{
  return SingleFractalRidgedMulti<Single2DFPtr>(&WasmNoise::SingleCellular, x, y);
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellular2EdgeFractalFBM(WN_DECIMAL x, WN_DECIMAL y)
{
  return SingleFractalFBM<Single2DFPtr>(&WasmNoise::SingleCellular2Edge, x, y);
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellular2EdgeFractalBillow(WN_DECIMAL x, WN_DECIMAL y)
{
  return SingleFractalBillow<Single2DFPtr>(&WasmNoise::SingleCellular2Edge, x, y);
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellular2EdgeFractalRidgedMulti(WN_DECIMAL x, WN_DECIMAL y)
{
  return SingleFractalRidgedMulti<Single2DFPtr>(&WasmNoise::SingleCellular2Edge, x, y);
}

// 3D Cellular Fractal Functions
WN_INLINE WN_DECIMAL WasmNoise::SingleCellularFractalFBM(WN_DECIMAL x, WN_DECIMAL y, WN_DECIMAL z)
{
  return SingleFractalFBM<Single3DFPtr>(&WasmNoise::SingleCellular, x, y, z);
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellularFractalBillow(WN_DECIMAL x, WN_DECIMAL y, WN_DECIMAL z)
{
  return SingleFractalBillow<Single3DFPtr>(&WasmNoise::SingleCellular, x, y, z);
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellularFractalRidgedMulti(WN_DECIMAL x, WN_DECIMAL y, WN_DECIMAL z)
{
  return SingleFractalRidgedMulti<Single3DFPtr>(&WasmNoise::SingleCellular, x, y, z);
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellular2EdgeFractalFBM(WN_DECIMAL x, WN_DECIMAL y, WN_DECIMAL z)
{
  return SingleFractalFBM<Single3DFPtr>(&WasmNoise::SingleCellular2Edge, x, y, z);
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellular2EdgeFractalBillow(WN_DECIMAL x, WN_DECIMAL y, WN_DECIMAL z)
{
  return SingleFractalBillow<Single3DFPtr>(&WasmNoise::SingleCellular2Edge, x, y, z);
}

WN_INLINE WN_DECIMAL WasmNoise::SingleCellular2EdgeFractalRidgedMulti(WN_DECIMAL x, WN_DECIMAL y, WN_DECIMAL z)
{
  return SingleFractalRidgedMulti<Single3DFPtr>(&WasmNoise::SingleCellular2Edge, x, y, z);
}
#endif

// End Single Noise Function Section ***************************

// Public Cellular Noise Functions

#ifdef WN_INCLUDE_CELLULAR
// 2D Single
WN_INLINE WN_DECIMAL WasmNoise::GetCellular(WN_DECIMAL x, WN_DECIMAL y) const
{
  x *= frequency;
  y *= frequency;

  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    return SingleCellular(0, x, y);
  }
  default: // Distance2
  {
    return SingleCellular2Edge(0, x, y);
  }
  }
}

WN_INLINE WN_DECIMAL *WasmNoise::GetCellularStrip(WN_DECIMAL startX, WN_DECIMAL startY, uint32 length, StripDirection direction)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    return GetStrip2D(&WasmNoise::SingleCellular, startX, startY, length, direction);
  }
  default: // Distance2
  {
    return GetStrip2D(&WasmNoise::SingleCellular2Edge, startX, startY, length, direction);
  }
  }
}

WN_INLINE WN_DECIMAL *WasmNoise::GetCellularSquare(WN_DECIMAL startX, WN_DECIMAL startY, uint32 width, uint32 height)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    return GetSquare2D(&WasmNoise::SingleCellular, startX, startY, width, height);
  }
  default: // Distance2
  {
    return GetSquare2D(&WasmNoise::SingleCellular2Edge, startX, startY, width, height);
  }
  }
}


// 3D Single
WN_INLINE WN_DECIMAL WasmNoise::GetCellular(WN_DECIMAL x, WN_DECIMAL y, WN_DECIMAL z) const
{
  x *= frequency;
  y *= frequency;
  z *= frequency;

  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    return SingleCellular(0, x, y, z);
  }
  default: // Distance2
  {
    return SingleCellular2Edge(0, x, y, z);
  }
  }
}

WN_INLINE WN_DECIMAL *WasmNoise::GetCellularStrip(WN_DECIMAL startX, WN_DECIMAL startY, WN_DECIMAL startZ, uint32 length, StripDirection direction)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    return GetStrip3D(&WasmNoise::SingleCellular, startX, startY, startZ, length, direction);
  }
  default: // Distance2
  {
    return GetStrip3D(&WasmNoise::SingleCellular2Edge, startX, startY, startZ, length, direction);
  }
  }
}

WN_INLINE WN_DECIMAL *WasmNoise::GetCellularSquare(WN_DECIMAL startX, WN_DECIMAL startY, WN_DECIMAL startZ, uint32 width, uint32 height, SquarePlane plane)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    return GetSquare3D(&WasmNoise::SingleCellular, startX, startY, startZ, width, height, plane);
  }
  default: // Distance2
  {
    return GetSquare3D(&WasmNoise::SingleCellular2Edge, startX, startY, startZ, width, height, plane);
  }
  }
}

WN_INLINE WN_DECIMAL *WasmNoise::GetCellularCube(WN_DECIMAL startX, WN_DECIMAL startY, WN_DECIMAL startZ, uint32 width, uint32 height, uint32 depth)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    return GetCube3D(&WasmNoise::SingleCellular, startX, startY, startZ, width, height, depth);
  }
  default: // Distance2
  {
    return GetCube3D(&WasmNoise::SingleCellular2Edge, startX, startY, startZ, width, height, depth);
  }
  }
}
#endif // WN_INCLUDE_CELLULAR

#ifdef WN_INCLUDE_CELLULAR_FRACTAL
// 2D Fractal
WN_INLINE WN_DECIMAL WasmNoise::GetCellularFractal(WN_DECIMAL x, WN_DECIMAL y)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return SingleCellularFractalFBM(x * frequency, y * frequency);
    case FractalType::Billow:       return SingleCellularFractalBillow(x * frequency, y * frequency);
    case FractalType::RidgedMulti:  return SingleCellularFractalRidgedMulti(x * frequency, y * frequency);
    default:
      ABORT();
      return 0;
    }
  }
  default: // Distance2
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return SingleCellular2EdgeFractalFBM(x * frequency, y * frequency);
    case FractalType::Billow:       return SingleCellular2EdgeFractalBillow(x * frequency, y * frequency);
    case FractalType::RidgedMulti:  return SingleCellular2EdgeFractalRidgedMulti(x * frequency, y * frequency);
    default:
      ABORT();
      return 0;
    }
  }
  }
}

WN_INLINE WN_DECIMAL *WasmNoise::GetCellularFractalStrip(WN_DECIMAL startX, WN_DECIMAL startY, uint32 length, StripDirection direction)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return GetStrip2D(&WasmNoise::SingleCellularFractalFBM, startX, startY, length, direction);
    case FractalType::Billow:       return GetStrip2D(&WasmNoise::SingleCellularFractalBillow, startX, startY, length, direction);
    case FractalType::RidgedMulti:  return GetStrip2D(&WasmNoise::SingleCellularFractalRidgedMulti, startX, startY, length, direction);
    default:
      ABORT();
      return 0;
    }
  }
  default: // Distance2
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return GetStrip2D(&WasmNoise::SingleCellular2EdgeFractalFBM, startX, startY, length, direction);
    case FractalType::Billow:       return GetStrip2D(&WasmNoise::SingleCellular2EdgeFractalBillow, startX, startY, length, direction);
    case FractalType::RidgedMulti:  return GetStrip2D(&WasmNoise::SingleCellular2EdgeFractalRidgedMulti, startX, startY, length, direction);
    default:
      ABORT();
      return 0;
    }
  }
  }
}

WN_INLINE WN_DECIMAL *WasmNoise::GetCellularFractalSquare(WN_DECIMAL startX, WN_DECIMAL startY, uint32 length, uint32 height)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return GetSquare2D(&WasmNoise::SingleCellularFractalFBM, startX, startY, length, height);
    case FractalType::Billow:       return GetSquare2D(&WasmNoise::SingleCellularFractalBillow, startX, startY, length, height);
    case FractalType::RidgedMulti:  return GetSquare2D(&WasmNoise::SingleCellularFractalRidgedMulti, startX, startY, length, height);
    default:
      ABORT();
      return 0;
    }
  }
  default: // Distance2
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return GetSquare2D(&WasmNoise::SingleCellular2EdgeFractalFBM, startX, startY, length, height);
    case FractalType::Billow:       return GetSquare2D(&WasmNoise::SingleCellular2EdgeFractalBillow, startX, startY, length, height);
    case FractalType::RidgedMulti:  return GetSquare2D(&WasmNoise::SingleCellular2EdgeFractalRidgedMulti, startX, startY, length, height);
    default:
      ABORT();
      return 0;
    }
  }
  }
}

// 3D Fractal
WN_INLINE WN_DECIMAL WasmNoise::GetCellularFractal(WN_DECIMAL x, WN_DECIMAL y, WN_DECIMAL z)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return SingleCellularFractalFBM(x * frequency, y * frequency, z * frequency);
    case FractalType::Billow:       return SingleCellularFractalBillow(x * frequency, y * frequency, z * frequency);
    case FractalType::RidgedMulti:  return SingleCellularFractalRidgedMulti(x * frequency, y * frequency, z * frequency);
    default:
      ABORT();
      return 0;
    }
  }
  default: // Distance2
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return SingleCellular2EdgeFractalFBM(x * frequency, y * frequency, z * frequency);
    case FractalType::Billow:       return SingleCellular2EdgeFractalBillow(x * frequency, y * frequency, z * frequency);
    case FractalType::RidgedMulti:  return SingleCellular2EdgeFractalRidgedMulti(x * frequency, y * frequency, z * frequency);
    default:
      ABORT();
      return 0;
    }
  }
  }
}

WN_INLINE WN_DECIMAL *WasmNoise::GetCellularFractalStrip(WN_DECIMAL startX, WN_DECIMAL startY, WN_DECIMAL startZ, uint32 length, StripDirection direction)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return GetStrip3D(&WasmNoise::SingleCellularFractalFBM, startX, startY, startZ, length, direction);
    case FractalType::Billow:       return GetStrip3D(&WasmNoise::SingleCellularFractalBillow, startX, startY, startZ, length, direction);
    case FractalType::RidgedMulti:  return GetStrip3D(&WasmNoise::SingleCellularFractalRidgedMulti, startX, startY, startZ, length, direction);
    default:
      ABORT();
      return 0;
    }
  }
  default: // Distance2
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return GetStrip3D(&WasmNoise::SingleCellular2EdgeFractalFBM, startX, startY, startZ, length, direction);
    case FractalType::Billow:       return GetStrip3D(&WasmNoise::SingleCellular2EdgeFractalBillow, startX, startY, startZ, length, direction);
    case FractalType::RidgedMulti:  return GetStrip3D(&WasmNoise::SingleCellular2EdgeFractalRidgedMulti, startX, startY, startZ, length, direction);
    default:
      ABORT();
      return 0;
    }
  }
  }
}

WN_INLINE WN_DECIMAL *WasmNoise::GetCellularFractalSquare(WN_DECIMAL startX, WN_DECIMAL startY, WN_DECIMAL startZ, uint32 length, uint32 height, SquarePlane plane)
{
  switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return GetSquare3D(&WasmNoise::SingleCellularFractalFBM, startX, startY, startZ, length, height, plane);
    case FractalType::Billow:       return GetSquare3D(&WasmNoise::SingleCellularFractalBillow, startX, startY, startZ, length, height, plane);
    case FractalType::RidgedMulti:  return GetSquare3D(&WasmNoise::SingleCellularFractalRidgedMulti, startX, startY, startZ, length, height, plane);
    default:
      ABORT();
      return 0;
    }
  }
  default: // Distance2
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return GetSquare3D(&WasmNoise::SingleCellular2EdgeFractalFBM, startX, startY, startZ, length, height, plane);
    case FractalType::Billow:       return GetSquare3D(&WasmNoise::SingleCellular2EdgeFractalBillow, startX, startY, startZ, length, height, plane);
    case FractalType::RidgedMulti:  return GetSquare3D(&WasmNoise::SingleCellular2EdgeFractalRidgedMulti, startX, startY, startZ, length, height, plane);
    default:
      ABORT();
      return 0;
    }
  }
  }
}

WN_INLINE WN_DECIMAL *WasmNoise::GetCellularFractalCube(WN_DECIMAL startX, WN_DECIMAL startY, WN_DECIMAL startZ, uint32 width, uint32 height, uint32 depth)
{
    switch(cellularReturnType)
  {
  case CellularReturnType::CellValue:
  case CellularReturnType::Distance:
  case CellularReturnType::NoiseLookupPerlin:
  case CellularReturnType::NoiseLookupSimplex:
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return GetCube3D(&WasmNoise::SingleCellularFractalFBM, startX, startY, startZ, width, height, depth);
    case FractalType::Billow:       return GetCube3D(&WasmNoise::SingleCellularFractalBillow, startX, startY, startZ, width, height, depth);
    case FractalType::RidgedMulti:  return GetCube3D(&WasmNoise::SingleCellularFractalRidgedMulti, startX, startY, startZ, width, height, depth);
    default:
      ABORT();
      return 0;
    }
  }
  default: // Distance2
  {
    switch(fractalType)
    {
    case FractalType::FBM:          return GetCube3D(&WasmNoise::SingleCellular2EdgeFractalFBM, startX, startY, startZ, width, height, depth);
    case FractalType::Billow:       return GetCube3D(&WasmNoise::SingleCellular2EdgeFractalBillow, startX, startY, startZ, width, height, depth);
    case FractalType::RidgedMulti:  return GetCube3D(&WasmNoise::SingleCellular2EdgeFractalRidgedMulti, startX, startY, startZ, width, height, depth);
    default:
      ABORT();
      return 0;
    }
  }
  }
}
#endif // WN_INCLUDE_CELLULAR_FRACTAL
